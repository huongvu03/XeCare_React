/**
 * Script ƒë·ªÉ fix user ID mismatch trong notifications
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:8080';

async function fixNotificationUserID() {
  console.log('üîß Fixing Notification User ID Mismatch...\n');

  // Thay ƒë·ªïi th√¥ng tin n√†y theo user th·∫≠t c·ªßa b·∫°n
  const testUser = {
    email: 'your-email@example.com',  // Thay b·∫±ng email th·∫≠t
    password: 'your-password'         // Thay b·∫±ng password th·∫≠t
  };

  try {
    // 1. ƒêƒÉng nh·∫≠p
    console.log('üìù 1. Logging in...');
    const loginResponse = await axios.post(`${BASE_URL}/apis/v1/login`, testUser);
    
    if (!loginResponse.data.token) {
      console.error('‚ùå Login failed');
      return;
    }
    
    const token = loginResponse.data.token;
    const loggedInUserId = loginResponse.data.id;
    console.log(`‚úÖ Login successful - User ID: ${loggedInUserId}`);
    
    // 2. Debug notifications
    console.log('\nüìù 2. Debugging notifications...');
    const debugResponse = await axios.get(`${BASE_URL}/apis/notifications/debug-all`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    console.log('üìä Debug results:');
    console.log(`   Current User ID: ${debugResponse.data.currentUserId}`);
    console.log(`   Total Notifications: ${debugResponse.data.totalNotifications}`);
    console.log(`   User Notifications: ${debugResponse.data.userNotifications}`);
    console.log(`   Recipient Stats:`, debugResponse.data.recipientStats);
    
    // 3. T·∫°o notification m·ªõi v·ªõi user ID ƒë√∫ng
    console.log('\nüìù 3. Creating new notification with correct user ID...');
    
    // T·∫°o test notification
    const testNotificationResponse = await axios.post(`${BASE_URL}/apis/emergency/test-notification`, {}, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    console.log('‚úÖ Test notification created:', testNotificationResponse.data);
    
    // Ch·ªù notification ƒë∆∞·ª£c t·∫°o
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // 4. T·∫°o emergency request ƒë·ªÉ c√≥ notification th·∫≠t
    console.log('\nüìù 4. Creating emergency request...');
    const emergencyData = {
      description: 'Test emergency for notification fix',
      latitude: 10.7769,
      longitude: 106.7009
    };
    
    const emergencyResponse = await axios.post(`${BASE_URL}/apis/emergency/request`, emergencyData, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    console.log('‚úÖ Emergency request created:', emergencyResponse.data.id);
    
    // Ch·ªù notification ƒë∆∞·ª£c t·∫°o
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // 5. Ki·ªÉm tra notifications sau khi t·∫°o
    console.log('\nüìù 5. Checking notifications after creation...');
    const notificationsResponse = await axios.get(`${BASE_URL}/apis/notifications/me`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    const notifications = notificationsResponse.data;
    console.log(`üìä Notifications found: ${notifications.length}`);
    
    if (notifications.length === 0) {
      console.log('‚ö†Ô∏è Still no notifications found');
      console.log('üí° This means the issue is not just user ID mismatch');
      return;
    }
    
    // 6. Test mark as read v·ªõi notification m·ªõi
    const unreadNotification = notifications.find(n => !n.isRead);
    
    if (unreadNotification) {
      console.log(`\nüìù 6. Testing mark as read for notification ID: ${unreadNotification.id}`);
      console.log(`   Recipient ID: ${unreadNotification.recipientId}`);
      console.log(`   Current User ID: ${loggedInUserId}`);
      
      if (unreadNotification.recipientId === loggedInUserId) {
        console.log('‚úÖ User ID matches - testing mark as read...');
        
        try {
          await axios.post(`${BASE_URL}/apis/notifications/${unreadNotification.id}/read`, {}, {
            headers: { Authorization: `Bearer ${token}` }
          });
          console.log('‚úÖ Mark as read succeeded');
          
          // Ki·ªÉm tra l·∫°i
          const updatedNotificationsResponse = await axios.get(`${BASE_URL}/apis/notifications/me`, {
            headers: { Authorization: `Bearer ${token}` }
          });
          
          const updatedNotifications = updatedNotificationsResponse.data;
          const updatedNotification = updatedNotifications.find(n => n.id === unreadNotification.id);
          
          if (updatedNotification && updatedNotification.isRead) {
            console.log('‚úÖ Notification is now marked as read');
          } else {
            console.log('‚ö†Ô∏è Notification is still not marked as read');
          }
          
        } catch (error) {
          console.log('‚ùå Mark as read failed:');
          console.log(`   Status: ${error.response?.status}`);
          console.log(`   Message: ${error.response?.data || error.message}`);
        }
      } else {
        console.log('‚ùå User ID still does not match');
        console.log(`   Notification Recipient ID: ${unreadNotification.recipientId}`);
        console.log(`   Current User ID: ${loggedInUserId}`);
      }
    } else {
      console.log('‚ö†Ô∏è No unread notifications found to test');
    }
    
  } catch (error) {
    console.error('‚ùå General error:', error.message);
  }
  
  console.log('\nüèÅ Fix completed!');
  console.log('\nüí° Next steps:');
  console.log('   1. Check if notifications are now visible on frontend');
  console.log('   2. Test the "Mark as Read" button');
  console.log('   3. If still not working, check browser console for errors');
}

// Ch·∫°y fix
fixNotificationUserID();
