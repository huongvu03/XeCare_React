/**
 * Test script ƒë·ªÉ ki·ªÉm tra b·∫£o m·∫≠t c·ªßa user profile
 * Ch·∫°y script n√†y ƒë·ªÉ test c√°c endpoint profile
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:8080';

// Test cases
async function testProfileSecurity() {
  console.log('üîí Testing User Profile Security...\n');

  // Test 1: Truy c·∫≠p profile m√† kh√¥ng c√≥ token
  console.log('Test 1: Truy c·∫≠p profile m√† kh√¥ng c√≥ token');
  try {
    const response = await axios.get(`${BASE_URL}/apis/user/profile`);
    console.log('‚ùå FAIL: C√≥ th·ªÉ truy c·∫≠p profile m√† kh√¥ng c·∫ßn authentication');
  } catch (error) {
    if (error.response?.status === 401 || error.response?.status === 403) {
      console.log('‚úÖ PASS: Profile ƒë∆∞·ª£c b·∫£o v·ªá ƒë√∫ng c√°ch');
    } else {
      console.log('‚ùå FAIL: L·ªói kh√¥ng mong mu·ªën:', error.response?.status);
    }
  }

  // Test 2: Truy c·∫≠p profile v·ªõi token kh√¥ng h·ª£p l·ªá
  console.log('\nTest 2: Truy c·∫≠p profile v·ªõi token kh√¥ng h·ª£p l·ªá');
  try {
    const response = await axios.get(`${BASE_URL}/apis/user/profile`, {
      headers: {
        'Authorization': 'Bearer invalid_token_123'
      }
    });
    console.log('‚ùå FAIL: C√≥ th·ªÉ truy c·∫≠p profile v·ªõi token kh√¥ng h·ª£p l·ªá');
  } catch (error) {
    if (error.response?.status === 401 || error.response?.status === 403) {
      console.log('‚úÖ PASS: Token kh√¥ng h·ª£p l·ªá b·ªã t·ª´ ch·ªëi');
    } else {
      console.log('‚ùå FAIL: L·ªói kh√¥ng mong mu·ªën:', error.response?.status);
    }
  }

  // Test 3: Update profile m√† kh√¥ng c√≥ token
  console.log('\nTest 3: Update profile m√† kh√¥ng c√≥ token');
  try {
    const response = await axios.put(`${BASE_URL}/apis/user/profile`, {
      name: 'Test User',
      email: 'test@example.com'
    });
    console.log('‚ùå FAIL: C√≥ th·ªÉ update profile m√† kh√¥ng c·∫ßn authentication');
  } catch (error) {
    if (error.response?.status === 401 || error.response?.status === 403) {
      console.log('‚úÖ PASS: Update profile ƒë∆∞·ª£c b·∫£o v·ªá ƒë√∫ng c√°ch');
    } else {
      console.log('‚ùå FAIL: L·ªói kh√¥ng mong mu·ªën:', error.response?.status);
    }
  }

  // Test 4: Update profile image m√† kh√¥ng c√≥ token
  console.log('\nTest 4: Update profile image m√† kh√¥ng c√≥ token');
  try {
    const formData = new FormData();
    formData.append('image', 'fake_image_data');
    
    const response = await axios.put(`${BASE_URL}/apis/user/profile/image`, formData, {
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    });
    console.log('‚ùå FAIL: C√≥ th·ªÉ update profile image m√† kh√¥ng c·∫ßn authentication');
  } catch (error) {
    if (error.response?.status === 401 || error.response?.status === 403) {
      console.log('‚úÖ PASS: Update profile image ƒë∆∞·ª£c b·∫£o v·ªá ƒë√∫ng c√°ch');
    } else {
      console.log('‚ùå FAIL: L·ªói kh√¥ng mong mu·ªën:', error.response?.status);
    }
  }

  // Test 5: Ki·ªÉm tra endpoint c≈© v·∫´n ho·∫°t ƒë·ªông (n·∫øu c√≥)
  console.log('\nTest 5: Ki·ªÉm tra endpoint c≈© c√≥ b·ªã v√¥ hi·ªáu h√≥a kh√¥ng');
  try {
    const response = await axios.put(`${BASE_URL}/apis/v1/users/1`, {
      name: 'Test User',
      email: 'test@example.com'
    });
    console.log('‚ö†Ô∏è  WARNING: Endpoint c≈© v·∫´n c√≥ th·ªÉ truy c·∫≠p');
  } catch (error) {
    if (error.response?.status === 401 || error.response?.status === 403) {
      console.log('‚úÖ PASS: Endpoint c≈© ƒë∆∞·ª£c b·∫£o v·ªá ƒë√∫ng c√°ch');
    } else {
      console.log('‚ÑπÔ∏è  INFO: Endpoint c≈© tr·∫£ v·ªÅ l·ªói:', error.response?.status);
    }
  }

  console.log('\nüéØ Test Summary:');
  console.log('- T·∫•t c·∫£ endpoint profile ƒë·ªÅu y√™u c·∫ßu authentication');
  console.log('- Token kh√¥ng h·ª£p l·ªá b·ªã t·ª´ ch·ªëi');
  console.log('- C√°c endpoint update ƒë∆∞·ª£c b·∫£o v·ªá ƒë√∫ng c√°ch');
  console.log('\n‚úÖ Profile security test completed!');
}

// Ch·∫°y test
testProfileSecurity().catch(console.error);
