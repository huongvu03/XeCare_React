/**
 * Script debug user ID mismatch
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:8080';

async function debugUserIDMismatch() {
  console.log('üîç Debugging User ID Mismatch...\n');

  // Thay ƒë·ªïi th√¥ng tin n√†y theo user th·∫≠t c·ªßa b·∫°n
  const testUser = {
    email: 'your-email@example.com',  // Thay b·∫±ng email th·∫≠t
    password: 'your-password'         // Thay b·∫±ng password th·∫≠t
  };

  try {
    // 1. ƒêƒÉng nh·∫≠p
    console.log('üìù 1. Logging in...');
    const loginResponse = await axios.post(`${BASE_URL}/apis/v1/login`, testUser);
    
    if (!loginResponse.data.token) {
      console.error('‚ùå Login failed');
      return;
    }
    
    const token = loginResponse.data.token;
    const loggedInUserId = loginResponse.data.id;
    console.log(`‚úÖ Login successful - User ID: ${loggedInUserId}`);
    console.log(`üë§ User info:`, {
      id: loginResponse.data.id,
      email: loginResponse.data.email,
      name: loginResponse.data.name,
      role: loginResponse.data.role
    });
    
    // 2. Ki·ªÉm tra user hi·ªán t·∫°i t·ª´ emergency endpoint
    console.log('\nüìù 2. Checking current user from emergency endpoint...');
    try {
      const userResponse = await axios.get(`${BASE_URL}/apis/emergency/current-user`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      console.log('üë§ Current user from emergency:', userResponse.data);
      
      if (userResponse.data.id !== loggedInUserId) {
        console.log('‚ö†Ô∏è WARNING: User ID mismatch!');
        console.log(`   Login ID: ${loggedInUserId}`);
        console.log(`   Emergency ID: ${userResponse.data.id}`);
      }
      
    } catch (error) {
      console.error('‚ùå Error getting user info:', error.response?.data || error.message);
    }
    
    // 3. Ki·ªÉm tra notifications v·ªõi user ID th·∫≠t
    console.log('\nüìù 3. Checking notifications with real user ID...');
    try {
      const notificationsResponse = await axios.get(`${BASE_URL}/apis/notifications/me`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      const notifications = notificationsResponse.data;
      console.log(`üìä Notifications found: ${notifications.length}`);
      
      if (notifications.length === 0) {
        console.log('‚ö†Ô∏è No notifications found for current user');
        console.log('üí° This might be because notifications were created for user ID = 3');
        console.log('üí° But you are logged in as user ID =', loggedInUserId);
      } else {
        console.log('‚úÖ Notifications found:');
        notifications.forEach((notification, index) => {
          console.log(`\n  ${index + 1}. ID: ${notification.id}`);
          console.log(`     Title: ${notification.title}`);
          console.log(`     Recipient ID: ${notification.recipientId}`);
          console.log(`     Read: ${notification.isRead ? 'Yes' : 'No'}`);
          console.log(`     Created: ${notification.createdAt}`);
        });
      }
      
    } catch (error) {
      console.error('‚ùå Error getting notifications:', error.response?.data || error.message);
    }
    
    // 4. Test t·∫°o notification v·ªõi user ID ƒë√∫ng
    console.log('\nüìù 4. Creating test notification with correct user ID...');
    try {
      const testResponse = await axios.post(`${BASE_URL}/apis/emergency/test-notification`, {}, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      console.log('‚úÖ Test notification response:', testResponse.data);
      
      // Ch·ªù notification ƒë∆∞·ª£c t·∫°o
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Ki·ªÉm tra l·∫°i notifications
      const newNotificationsResponse = await axios.get(`${BASE_URL}/apis/notifications/me`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      const newNotifications = newNotificationsResponse.data;
      console.log(`üìä Notifications after test: ${newNotifications.length}`);
      
      if (newNotifications.length > 0) {
        console.log('‚úÖ Test notification found!');
        const testNotification = newNotifications.find(n => n.title.includes('Test'));
        if (testNotification) {
          console.log('üìã Test notification details:', {
            id: testNotification.id,
            title: testNotification.title,
            recipientId: testNotification.recipientId,
            message: testNotification.message
          });
        }
      }
      
    } catch (error) {
      console.error('‚ùå Error creating test notification:', error.response?.data || error.message);
    }
    
    // 5. Ki·ªÉm tra t·∫•t c·∫£ notifications trong database (n·∫øu c√≥ quy·ªÅn admin)
    console.log('\nüìù 5. Checking all notifications in database...');
    try {
      // Th·ª≠ endpoint admin n·∫øu c√≥
      const allNotificationsResponse = await axios.get(`${BASE_URL}/apis/notifications/all`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      console.log('üìä All notifications:', allNotificationsResponse.data);
      
    } catch (error) {
      console.log('‚ö†Ô∏è Cannot access all notifications (normal for non-admin users)');
    }
    
  } catch (error) {
    console.error('‚ùå General error:', error.message);
  }
  
  console.log('\nüèÅ Debug completed!');
  console.log('\nüí° Solutions:');
  console.log('   1. If user ID mismatch: Update emergency creation to use correct user ID');
  console.log('   2. If no notifications: Check if notifications were created for wrong user');
  console.log('   3. If API error: Check server logs and authentication');
}

// Ch·∫°y debug
debugUserIDMismatch();
