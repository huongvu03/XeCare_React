"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import {
  MessageCircle,
  X,
  Send,
  Bot,
  User,
  MapPin,
  Calendar,
  AlertTriangle,
  Wrench,
  Search,
  Star,
  Clock,
  Phone,
  DollarSign,
  Settings,
} from "lucide-react"

interface Message {
  id: string
  content: string
  sender: "user" | "bot"
  timestamp: Date
}

interface Suggestion {
  id: string
  text: string
  icon: React.ReactNode
  category: "search" | "booking" | "emergency" | "service"
  color: string
}

const initialSuggestions: Suggestion[] = [
  // T√¨m ki·∫øm
  {
    id: "1",
    text: "T√¨m garage g·∫ßn nh·∫•t",
    icon: <MapPin className="h-4 w-4" />,
    category: "search",
    color: "bg-blue-500",
  },
  {
    id: "2",
    text: "Garage c√≥ rating cao nh·∫•t",
    icon: <Star className="h-4 w-4" />,
    category: "search",
    color: "bg-blue-500",
  },
  { id: "3", text: "Garage m·ªü 24/7", icon: <Clock className="h-4 w-4" />, category: "search", color: "bg-blue-500" },
  {
    id: "4",
    text: "Garage s·ª≠a xe m√°y",
    icon: <Search className="h-4 w-4" />,
    category: "search",
    color: "bg-blue-500",
  },

  // ƒê·∫∑t l·ªãch
  {
    id: "5",
    text: "ƒê·∫∑t l·ªãch s·ª≠a xe",
    icon: <Calendar className="h-4 w-4" />,
    category: "booking",
    color: "bg-green-500",
  },
  {
    id: "6",
    text: "Ki·ªÉm tra l·ªãch tr·ªëng",
    icon: <Calendar className="h-4 w-4" />,
    category: "booking",
    color: "bg-green-500",
  },
  { id: "7", text: "H·ªßy l·ªãch h·∫πn", icon: <X className="h-4 w-4" />, category: "booking", color: "bg-green-500" },
  { id: "8", text: "ƒê·ªïi l·ªãch h·∫πn", icon: <Settings className="h-4 w-4" />, category: "booking", color: "bg-green-500" },

  // C·ª©u h·ªô
  {
    id: "9",
    text: "C·ª©u h·ªô kh·∫©n c·∫•p",
    icon: <AlertTriangle className="h-4 w-4" />,
    category: "emergency",
    color: "bg-red-500",
  },
  {
    id: "10",
    text: "Xe b·ªã h·ªèng tr√™n ƒë∆∞·ªùng",
    icon: <AlertTriangle className="h-4 w-4" />,
    category: "emergency",
    color: "bg-red-500",
  },
  {
    id: "11",
    text: "G·ªçi c·ª©u h·ªô g·∫ßn nh·∫•t",
    icon: <Phone className="h-4 w-4" />,
    category: "emergency",
    color: "bg-red-500",
  },
  {
    id: "12",
    text: "B√°o gi√° c·ª©u h·ªô",
    icon: <DollarSign className="h-4 w-4" />,
    category: "emergency",
    color: "bg-red-500",
  },

  // D·ªãch v·ª•
  {
    id: "13",
    text: "B·∫£ng gi√° d·ªãch v·ª•",
    icon: <DollarSign className="h-4 w-4" />,
    category: "service",
    color: "bg-purple-500",
  },
  {
    id: "14",
    text: "Th·ªùi gian s·ª≠a ch·ªØa",
    icon: <Clock className="h-4 w-4" />,
    category: "service",
    color: "bg-purple-500",
  },
  {
    id: "15",
    text: "D·ªãch v·ª• thay d·∫ßu",
    icon: <Wrench className="h-4 w-4" />,
    category: "service",
    color: "bg-purple-500",
  },
  { id: "16", text: "S·ª≠a phanh xe", icon: <Wrench className="h-4 w-4" />, category: "service", color: "bg-purple-500" },
]

const categoryLabels = {
  search: "üîç T√¨m ki·∫øm",
  booking: "üìÖ ƒê·∫∑t l·ªãch",
  emergency: "üö® C·ª©u h·ªô",
  service: "üîß D·ªãch v·ª•",
}

export function Chatbox() {
  const [isOpen, setIsOpen] = useState(false)
  const [messages, setMessages] = useState<Message[]>([])
  const [inputValue, setInputValue] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [currentSuggestions, setCurrentSuggestions] = useState<Suggestion[]>(initialSuggestions)
  const [showSuggestions, setShowSuggestions] = useState(true)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const getContextualSuggestions = (lastMessage: string): Suggestion[] => {
    const lowerMessage = lastMessage.toLowerCase()

    if (lowerMessage.includes("garage") || lowerMessage.includes("t√¨m")) {
      return initialSuggestions.filter((s) => s.category === "search").slice(0, 3)
    }

    if (lowerMessage.includes("l·ªãch") || lowerMessage.includes("ƒë·∫∑t")) {
      return initialSuggestions.filter((s) => s.category === "booking").slice(0, 3)
    }

    if (lowerMessage.includes("c·ª©u h·ªô") || lowerMessage.includes("kh·∫©n c·∫•p")) {
      return initialSuggestions.filter((s) => s.category === "emergency").slice(0, 3)
    }

    if (lowerMessage.includes("gi√°") || lowerMessage.includes("d·ªãch v·ª•")) {
      return initialSuggestions.filter((s) => s.category === "service").slice(0, 3)
    }

    // Default: mix of popular suggestions
    return [
      initialSuggestions[0], // T√¨m garage g·∫ßn nh·∫•t
      initialSuggestions[4], // ƒê·∫∑t l·ªãch s·ª≠a xe
      initialSuggestions[8], // C·ª©u h·ªô kh·∫©n c·∫•p
    ]
  }

  const handleSendMessage = async (content: string) => {
    if (!content.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      content: content.trim(),
      sender: "user",
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInputValue("")
    setIsLoading(true)
    setShowSuggestions(false)

    try {
      const response = await fetch("http://localhost:8080/apis/v1/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ message: content.trim() }),
      })

      const data = await response.json()

      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: data.response || "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.",
        sender: "bot",
        timestamp: new Date(),
      }

      setMessages((prev) => [...prev, botMessage])

      // Update suggestions based on context
      const newSuggestions = getContextualSuggestions(content)
      setCurrentSuggestions(newSuggestions)
      setShowSuggestions(true)
    } catch (error) {
      console.error("Chat error:", error)
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi server. Vui l√≤ng th·ª≠ l·∫°i sau.",
        sender: "bot",
        timestamp: new Date(),
      }
      setMessages((prev) => [...prev, errorMessage])
    } finally {
      setIsLoading(false)
    }
  }

  const handleSuggestionClick = (suggestion: Suggestion) => {
    handleSendMessage(suggestion.text)
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage(inputValue)
    }
  }

  const groupedSuggestions = initialSuggestions.reduce(
    (acc, suggestion) => {
      if (!acc[suggestion.category]) {
        acc[suggestion.category] = []
      }
      acc[suggestion.category].push(suggestion)
      return acc
    },
    {} as Record<string, Suggestion[]>,
  )

  return (
    <>
      {/* Chat Toggle Button */}
      <Button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-6 right-6 h-14 w-14 rounded-full bg-gradient-to-r from-blue-600 to-cyan-600 shadow-lg hover:shadow-xl transition-all duration-300 z-40"
        size="icon"
      >
        <MessageCircle className="h-6 w-6" />
      </Button>

      {/* Chat Window */}
      {isOpen && (
        <div className="fixed bottom-6 right-6 w-96 h-[600px] bg-white rounded-lg shadow-2xl border border-slate-200 flex flex-col z-50">
          {/* Header */}
          <div className="flex items-center justify-between p-4 bg-gradient-to-r from-blue-600 to-cyan-600 text-white rounded-t-lg">
            <div className="flex items-center space-x-2">
              <Bot className="h-5 w-5" />
              <div>
                <h3 className="font-semibold">XeCare Assistant</h3>
                <p className="text-xs opacity-90">H·ªó tr·ª£ 24/7</p>
              </div>
            </div>
            <Button
              variant="ghost"
              size="icon"
              onClick={() => setIsOpen(false)}
              className="text-white hover:bg-white/20 h-8 w-8"
            >
              <X className="h-4 w-4" />
            </Button>
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.length === 0 ? (
              <div className="text-center py-8">
                <Bot className="h-12 w-12 text-blue-500 mx-auto mb-4" />
                <h4 className="font-semibold text-slate-900 mb-2">Ch√†o m·ª´ng ƒë·∫øn v·ªõi XeCare!</h4>
                <p className="text-sm text-slate-600 mb-6">
                  T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m garage, ƒë·∫∑t l·ªãch s·ª≠a xe, ho·∫∑c g·ªçi c·ª©u h·ªô kh·∫©n c·∫•p.
                </p>

                {/* Initial Suggestions by Category */}
                {showSuggestions && (
                  <div className="space-y-4">
                    {Object.entries(groupedSuggestions).map(([category, suggestions]) => (
                      <div key={category} className="text-left">
                        <h5 className="text-sm font-medium text-slate-700 mb-2 flex items-center">
                          {categoryLabels[category as keyof typeof categoryLabels]}
                        </h5>
                        <div className="grid grid-cols-1 gap-2">
                          {suggestions.slice(0, 2).map((suggestion) => (
                            <button
                              key={suggestion.id}
                              onClick={() => handleSuggestionClick(suggestion)}
                              className="flex items-center space-x-2 p-2 text-left text-sm bg-slate-50 hover:bg-slate-100 rounded-lg transition-colors"
                            >
                              <div className={`p-1 rounded ${suggestion.color} text-white`}>{suggestion.icon}</div>
                              <span className="text-slate-700">{suggestion.text}</span>
                            </button>
                          ))}
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            ) : (
              <>
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex ${message.sender === "user" ? "justify-end" : "justify-start"}`}
                  >
                    <div
                      className={`max-w-[80%] p-3 rounded-lg ${
                        message.sender === "user"
                          ? "bg-gradient-to-r from-blue-600 to-cyan-600 text-white"
                          : "bg-slate-100 text-slate-900"
                      }`}
                    >
                      <div className="flex items-start space-x-2">
                        {message.sender === "bot" && <Bot className="h-4 w-4 mt-0.5 text-blue-600" />}
                        <div className="flex-1">
                          <p className="text-sm whitespace-pre-wrap">{message.content}</p>
                          <p
                            className={`text-xs mt-1 ${message.sender === "user" ? "text-blue-100" : "text-slate-500"}`}
                          >
                            {message.timestamp.toLocaleTimeString("vi-VN", {
                              hour: "2-digit",
                              minute: "2-digit",
                            })}
                          </p>
                        </div>
                        {message.sender === "user" && <User className="h-4 w-4 mt-0.5 text-blue-100" />}
                      </div>
                    </div>
                  </div>
                ))}

                {isLoading && (
                  <div className="flex justify-start">
                    <div className="bg-slate-100 p-3 rounded-lg">
                      <div className="flex items-center space-x-2">
                        <Bot className="h-4 w-4 text-blue-600" />
                        <div className="flex space-x-1">
                          <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce"></div>
                          <div
                            className="w-2 h-2 bg-slate-400 rounded-full animate-bounce"
                            style={{ animationDelay: "0.1s" }}
                          ></div>
                          <div
                            className="w-2 h-2 bg-slate-400 rounded-full animate-bounce"
                            style={{ animationDelay: "0.2s" }}
                          ></div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {/* Contextual Suggestions */}
                {showSuggestions && messages.length > 0 && !isLoading && (
                  <div className="border-t pt-4">
                    <p className="text-xs text-slate-500 mb-2">G·ª£i √Ω cho b·∫°n:</p>
                    <div className="space-y-2">
                      {currentSuggestions.map((suggestion) => (
                        <button
                          key={suggestion.id}
                          onClick={() => handleSuggestionClick(suggestion)}
                          className="flex items-center space-x-2 p-2 text-left text-sm bg-slate-50 hover:bg-slate-100 rounded-lg transition-colors w-full"
                        >
                          <div className={`p-1 rounded ${suggestion.color} text-white`}>{suggestion.icon}</div>
                          <span className="text-slate-700">{suggestion.text}</span>
                        </button>
                      ))}
                    </div>
                  </div>
                )}
              </>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Input */}
          <div className="p-4 border-t border-slate-200">
            <div className="flex space-x-2">
              <Input
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Nh·∫≠p tin nh·∫Øn..."
                disabled={isLoading}
                className="flex-1"
              />
              <Button
                onClick={() => handleSendMessage(inputValue)}
                disabled={isLoading || !inputValue.trim()}
                size="icon"
                className="bg-gradient-to-r from-blue-600 to-cyan-600"
              >
                <Send className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>
      )}
    </>
  )
}
