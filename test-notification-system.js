/**
 * Test script ƒë·ªÉ ki·ªÉm tra h·ªá th·ªëng notification ho√†n ch·ªânh
 * Ch·∫°y script n√†y ƒë·ªÉ test c√°c t√≠nh nƒÉng notification
 */

const axios = require('axios');

// C·∫•u h√¨nh
const BASE_URL = 'http://localhost:8080';
const FRONTEND_URL = 'http://localhost:3000';

// Test data
const testUser = {
  email: 'test@example.com',
  password: 'password123'
};

const testGarage = {
  name: 'Test Garage',
  address: '123 Test Street',
  phone: '0123456789',
  email: 'garage@example.com'
};

async function testNotificationSystem() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu test h·ªá th·ªëng notification...\n');

  try {
    // 1. Test ƒëƒÉng nh·∫≠p v√† t·∫°o notification
    console.log('üìù 1. Testing login notification...');
    await testLoginNotification();
    
    // 2. Test t·∫°o emergency request v√† notification
    console.log('\nüìù 2. Testing emergency notification...');
    await testEmergencyNotification();
    
    // 3. Test favorite notification
    console.log('\nüìù 3. Testing favorite notification...');
    await testFavoriteNotification();
    
    // 4. Test appointment notification
    console.log('\nüìù 4. Testing appointment notification...');
    await testAppointmentNotification();
    
    // 5. Test l·∫•y danh s√°ch notifications
    console.log('\nüìù 5. Testing get notifications...');
    await testGetNotifications();
    
    console.log('\n‚úÖ T·∫•t c·∫£ test ƒë√£ ho√†n th√†nh!');
    
  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error.message);
  }
}

async function testLoginNotification() {
  try {
    const loginResponse = await axios.post(`${BASE_URL}/apis/v1/login`, testUser);
    
    if (loginResponse.data.token) {
      console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng - notification s·∫Ω ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông');
      
      // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ notification ƒë∆∞·ª£c t·∫°o
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Ki·ªÉm tra notification
      const notificationsResponse = await axios.get(`${BASE_URL}/apis/notifications/me`, {
        headers: { Authorization: `Bearer ${loginResponse.data.token}` }
      });
      
      const loginNotifications = notificationsResponse.data.filter(n => 
        n.title.includes('ƒêƒÉng nh·∫≠p th√†nh c√¥ng')
      );
      
      if (loginNotifications.length > 0) {
        console.log('‚úÖ Notification ƒëƒÉng nh·∫≠p ƒë√£ ƒë∆∞·ª£c t·∫°o:', loginNotifications[0].title);
      } else {
        console.log('‚ö†Ô∏è Ch∆∞a th·∫•y notification ƒëƒÉng nh·∫≠p');
      }
    }
  } catch (error) {
    console.error('‚ùå L·ªói test login notification:', error.response?.data || error.message);
  }
}

async function testEmergencyNotification() {
  try {
    // ƒêƒÉng nh·∫≠p tr∆∞·ªõc
    const loginResponse = await axios.post(`${BASE_URL}/apis/v1/login`, testUser);
    const token = loginResponse.data.token;
    
    // T·∫°o emergency request
    const emergencyData = {
      description: 'Xe b·ªã h·ªèng t·∫°i ƒë∆∞·ªùng ABC',
      latitude: 10.7769,
      longitude: 106.7009
    };
    
    const emergencyResponse = await axios.post(`${BASE_URL}/apis/emergency/request`, emergencyData, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    if (emergencyResponse.data.id) {
      console.log('‚úÖ Emergency request ƒë√£ ƒë∆∞·ª£c t·∫°o - notification s·∫Ω ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông');
      
      // Ch·ªù notification ƒë∆∞·ª£c t·∫°o
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Ki·ªÉm tra notification
      const notificationsResponse = await axios.get(`${BASE_URL}/apis/notifications/me`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      const emergencyNotifications = notificationsResponse.data.filter(n => 
        n.type === 'EMERGENCY_REQUEST_CREATED'
      );
      
      if (emergencyNotifications.length > 0) {
        console.log('‚úÖ Emergency notification ƒë√£ ƒë∆∞·ª£c t·∫°o:', emergencyNotifications[0].title);
      } else {
        console.log('‚ö†Ô∏è Ch∆∞a th·∫•y emergency notification');
      }
    }
  } catch (error) {
    console.error('‚ùå L·ªói test emergency notification:', error.response?.data || error.message);
  }
}

async function testFavoriteNotification() {
  try {
    // ƒêƒÉng nh·∫≠p tr∆∞·ªõc
    const loginResponse = await axios.post(`${BASE_URL}/apis/v1/login`, testUser);
    const token = loginResponse.data.token;
    
    // L·∫•y danh s√°ch garage ƒë·ªÉ th√™m v√†o favorite
    const garagesResponse = await axios.get(`${BASE_URL}/apis/garages/public`);
    const garages = garagesResponse.data;
    
    if (garages.length > 0) {
      const garageId = garages[0].id;
      
      // Th√™m v√†o favorite
      await axios.post(`${BASE_URL}/apis/favorites/${garageId}`, {}, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      console.log('‚úÖ Garage ƒë√£ ƒë∆∞·ª£c th√™m v√†o favorite - notification s·∫Ω ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông');
      
      // Ch·ªù notification ƒë∆∞·ª£c t·∫°o
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Ki·ªÉm tra notification
      const notificationsResponse = await axios.get(`${BASE_URL}/apis/notifications/me`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      const favoriteNotifications = notificationsResponse.data.filter(n => 
        n.type === 'FAVORITE_ADDED'
      );
      
      if (favoriteNotifications.length > 0) {
        console.log('‚úÖ Favorite notification ƒë√£ ƒë∆∞·ª£c t·∫°o:', favoriteNotifications[0].title);
      } else {
        console.log('‚ö†Ô∏è Ch∆∞a th·∫•y favorite notification');
      }
    } else {
      console.log('‚ö†Ô∏è Kh√¥ng c√≥ garage n√†o ƒë·ªÉ test favorite');
    }
  } catch (error) {
    console.error('‚ùå L·ªói test favorite notification:', error.response?.data || error.message);
  }
}

async function testAppointmentNotification() {
  try {
    // ƒêƒÉng nh·∫≠p tr∆∞·ªõc
    const loginResponse = await axios.post(`${BASE_URL}/apis/v1/login`, testUser);
    const token = loginResponse.data.token;
    
    // L·∫•y danh s√°ch garage ƒë·ªÉ ƒë·∫∑t l·ªãch
    const garagesResponse = await axios.get(`${BASE_URL}/apis/garages/public`);
    const garages = garagesResponse.data;
    
    if (garages.length > 0) {
      const garageId = garages[0].id;
      
      // T·∫°o appointment
      const appointmentData = {
        garageId: garageId,
        date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().split('T')[0], // Ng√†y mai
        time: '09:00',
        description: 'S·ª≠a ch·ªØa xe',
        vehicleType: 'CAR'
      };
      
      const appointmentResponse = await axios.post(`${BASE_URL}/apis/user/appointments`, appointmentData, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      if (appointmentResponse.data.id) {
        console.log('‚úÖ Appointment ƒë√£ ƒë∆∞·ª£c t·∫°o - notification s·∫Ω ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông');
        
        // Ch·ªù notification ƒë∆∞·ª£c t·∫°o
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Ki·ªÉm tra notification
        const notificationsResponse = await axios.get(`${BASE_URL}/apis/notifications/me`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        
        const appointmentNotifications = notificationsResponse.data.filter(n => 
          n.type === 'APPOINTMENT_CREATED'
        );
        
        if (appointmentNotifications.length > 0) {
          console.log('‚úÖ Appointment notification ƒë√£ ƒë∆∞·ª£c t·∫°o:', appointmentNotifications[0].title);
        } else {
          console.log('‚ö†Ô∏è Ch∆∞a th·∫•y appointment notification');
        }
      }
    } else {
      console.log('‚ö†Ô∏è Kh√¥ng c√≥ garage n√†o ƒë·ªÉ test appointment');
    }
  } catch (error) {
    console.error('‚ùå L·ªói test appointment notification:', error.response?.data || error.message);
  }
}

async function testGetNotifications() {
  try {
    // ƒêƒÉng nh·∫≠p tr∆∞·ªõc
    const loginResponse = await axios.post(`${BASE_URL}/apis/v1/login`, testUser);
    const token = loginResponse.data.token;
    
    // L·∫•y danh s√°ch notifications
    const notificationsResponse = await axios.get(`${BASE_URL}/apis/notifications/me`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    const notifications = notificationsResponse.data;
    console.log(`‚úÖ ƒê√£ l·∫•y ƒë∆∞·ª£c ${notifications.length} notifications`);
    
    // Hi·ªÉn th·ªã th·ªëng k√™
    const unreadCount = notifications.filter(n => !n.isRead).length;
    console.log(`üìä Th·ªëng k√™: ${unreadCount} ch∆∞a ƒë·ªçc / ${notifications.length} t·ªïng c·ªông`);
    
    // Hi·ªÉn th·ªã m·ªôt s·ªë notification m·∫´u
    notifications.slice(0, 3).forEach((notification, index) => {
      console.log(`üìã ${index + 1}. ${notification.title} (${notification.type})`);
    });
    
    // Test unread count API
    const unreadResponse = await axios.get(`${BASE_URL}/apis/notifications/me/unread-count`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    console.log(`üîî Unread count API: ${unreadResponse.data}`);
    
  } catch (error) {
    console.error('‚ùå L·ªói test get notifications:', error.response?.data || error.message);
  }
}

// Ch·∫°y test
if (require.main === module) {
  testNotificationSystem();
}

module.exports = { testNotificationSystem };
